import argparse
import os
import sys
import time
from datetime import datetime
from typing import Optional, Dict, Any, List

import yt_dlp
import torch
import whisper
from whisper.utils import get_writer
from db import db_adapter as db
import logging

from typing import Dict, Any, List


# def get_latest_tiktok_video_entry(username: str) -> Dict[str, Any]:
#     logging.info(f"[TikTok] L·∫•y video m·ªõi nh·∫•t c·ªßa @{username} ...")
#     logging.info(f"get latest TikTok video for user: {username} start")
#     """
#     L·∫•y metadata video m·ªõi nh·∫•t t·ª´ profile TikTok c·ªßa @username b·∫±ng yt-dlp (extract_flat).
#     Tr·∫£ v·ªÅ dict entry ch·ª©a √≠t nh·∫•t 'url' ho·∫∑c 'webpage_url' v√† 'timestamp'.
#     """
#     profile_url = f"https://www.tiktok.com/@{username}"
#     ydl_opts = {
#         "quiet": True,
#         "extract_flat": True,         # kh√¥ng t·∫£i, ch·ªâ l·∫•y danh s√°ch
#         "skip_download": True,
#         "nocheckcertificate": True,
#         "noplaylist": False,
#     }
#     # if cookies_file and os.path.exists(cookies_file):
#     #     ydl_opts["cookiefile"] = cookies_file

#     with yt_dlp.YoutubeDL(ydl_opts) as ydl:
#         info = ydl.extract_info(profile_url, download=False)

#     entries: List[Dict[str, Any]] = info.get("entries", []) if isinstance(info, dict) else []
#     if not entries:
#         raise RuntimeError("Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch video. C√≥ th·ªÉ TikTok ch·∫∑n truy c·∫≠p (y√™u c·∫ßu cookies) ho·∫∑c username sai.")

#     # Ch·ªçn entry c√≥ timestamp l·ªõn nh·∫•t (m·ªõi nh·∫•t)
#     def entry_ts(e):
#         ts = e.get("timestamp")
#         # N·∫øu thi·∫øu timestamp, ∆∞u ti√™n ƒë·∫ßu danh s√°ch (th∆∞·ªùng l√† m·ªõi nh·∫•t)
#         return ts if ts is not None else 0

#     latest = max(entries, key=entry_ts)
#     return latest
def resolve_tiktok_channel(username: str) -> str:
    """
    Tr·∫£ v·ªÅ channel_id d∆∞·ªõi d·∫°ng 'tiktokuser:<id>'
    N·∫øu username ƒë√£ l√† 'tiktokuser:...' th√¨ gi·ªØ nguy√™n
    """
    if username.startswith("tiktokuser:"):
        return username

    profile_url = f"https://www.tiktok.com/@{username}"
    ydl_opts = {
        "quiet": True,
        "extract_flat": "first",
        "skip_download": True,
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(profile_url, download=False)
        if "entries" in info and len(info["entries"]) > 0:
            first_entry = info["entries"][0]
            channel_id = first_entry.get("channel_id")
            if channel_id:
                return f"tiktokuser:{channel_id}"

    raise RuntimeError(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c channel_id cho {username}")


def get_latest_tiktok_video_entry(username: str) -> Dict[str, Any]:
    """
    L·∫•y video m·ªõi nh·∫•t t·ª´ TikTok user
    """
    # Resolve username th√†nh channel_id
    resolved = resolve_tiktok_channel(username)

    logging.info(f"get latest TikTok video for user: {username} ({resolved}) start")
    logging.info(f"[TikTok] L·∫•y video m·ªõi nh·∫•t c·ªßa {resolved} ...")

    ydl_opts = {
        "quiet": True,
        "extract_flat": True,
        "skip_download": True,
        "nocheckcertificate": True,
        "noplaylist": False,
        "simulate": True,
        "cookies": "cookies.txt",
        "playlistend": 10,
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            info = ydl.extract_info(resolved, download=False)
        except Exception as e:
            logging.error(f"‚ùå L·ªói extract_info TikTok {resolved}: {e}")
            raise RuntimeError(f"L·ªói extract_info TikTok: {e}")

    entries: List[Dict[str, Any]] = info.get("entries", []) if isinstance(info, dict) else []
    if not entries:
        raise RuntimeError("Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch video.")

    # L·∫•y 5 video ƒë·∫ßu ti√™n (tr√°nh video ghim c≈©)
    top_entries = entries[:5]

    # Ch·ªçn entry c√≥ timestamp l·ªõn nh·∫•t
    latest = max(top_entries, key=lambda e: e.get("timestamp") or 0)

    return {
        "id": latest.get("id"),
        "title": latest.get("title"),
        "url": latest.get("url") or latest.get("webpage_url"),
        "timestamp": latest.get("timestamp"),
    }

def download_best_audio(video_url: str, outdir: str, vid_id: str) -> str:
    # os.makedirs(outdir, exist_ok=True)
    output_path = os.path.join(outdir, f"{vid_id}.%(ext)s")
    ydl_opts = {
        "quiet": False,
        "outtmpl": output_path,
        "format": "bestaudio/best",
        "postprocessors": [
            {
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }
        ],
        "nocheckcertificate": True,
    }

    # with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    #     info = ydl.extract_info(video_url, download=True)
    #     filename = ydl.prepare_filename(info)   # t√™n file g·ªëc (th∆∞·ªùng .mp4)
    #     audio_path = os.path.splitext(filename)[0] + ".mp3"  # ƒë·ªïi sang .mp3 sau postprocess

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(video_url, download=True)

    # Sau postprocess, file ch·∫Øc ch·∫Øn l√† .mp3

    final_file = os.path.join(outdir, f"{vid_id}.mp3")

    return final_file



def transcribe_with_whisper(audio_path: str, model_size: str = "medium", language: Optional[str] = None,
                            outdir: str = "transcripts") -> Dict[str, str]:
    """
    Transcribe audio b·∫±ng OpenAI Whisper (local).
    - model_size: tiny/base/small/medium/large-v2/large-v3
    - language: m√£ ISO (vd 'vi' cho ti·∫øng Vi·ªát) ho·∫∑c None ƒë·ªÉ auto-detect
    Xu·∫•t file .txt v√† .srt. Tr·∫£ v·ªÅ dict ƒë∆∞·ªùng d·∫´n file.
    """
    os.makedirs(outdir, exist_ok=True)

    device = "cuda" if torch.cuda.is_available() else "cpu"
    logging.info(f"[Whisper] Loading model={model_size} on device={device} ...")
    model = whisper.load_model(model_size, device=device)

    # B·∫°n c√≥ th·ªÉ th√™m options nh∆∞ fp16 n·∫øu GPU h·ªó tr·ª£
    transcribe_kwargs = {}
    if language:
        transcribe_kwargs["language"] = language

    logging.info(f"[Whisper] Transcribing {language}...")
    result = model.transcribe(audio_path, **transcribe_kwargs)

    base = os.path.splitext(os.path.basename(audio_path))[0]
    txt_path = os.path.join(outdir, f"{base}.txt")
    srt_path = os.path.join(outdir, f"{base}.srt")

    # Ghi .txt
    with open(txt_path, "w", encoding="utf-8") as f:
        f.write(result.get("text", "").strip())

    # # Ghi .srt
    # srt_writer = get_writer("srt", outdir)
    # srt_writer(result, base)

    return {"txt": txt_path, "srt": srt_path}


def main():

    logging.info("üîç ƒêang t√¨m tiktok video m·ªõi nh·∫•t...")
    conn = db.get_connection()
    if conn is None:
        logging.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi DB")
        return

    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT tt_id, tt_link, tt_name FROM tt_group ORDER BY RANDOM()")
            rows = cursor.fetchall()
            data_list = list(rows)
    finally:
        conn.close()

    for id, link, name in data_list:
        logging.info(f"üîó Nh√≥m: {id}/{name}_{link}")

        user_name = link  # Thay th·∫ø b·∫±ng t√™n k√™nh TikTok b·∫°n mu·ªën
        cookies_file = None  # Thay th·∫ø b·∫±ng ƒë∆∞·ªùng d·∫´n cookies.txt n·∫øu c·∫ßn
        model_size = "medium"  # K√≠ch th∆∞·ªõc m√¥ h√¨nh Whisper
        language = 'vi'  # Ng√¥n ng·ªØ, ƒë·ªÉ tr·ªëng ƒë·ªÉ t·ª± ƒë·ªông    
        outdir = "downloads/audio"  # Th∆∞ m·ª•c t·∫£i audio
        transdir = "downloads/transcripts"  # Th∆∞ m·ª•c l∆∞u transcript
        args = argparse.Namespace(
            username=user_name,
            cookies=cookies_file,
            model=model_size,
            lang=language,
            outdir=outdir,
            transdir=transdir
        )
        try:
            logging.info(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] L·∫•y video m·ªõi nh·∫•t c·ªßa @{args.username} ...")
            latest_entry = get_latest_tiktok_video_entry(args.username)

            # C·ªë g·∫Øng l·∫•y URL video.
            video_url = latest_entry.get("url") or latest_entry.get("webpage_url") or latest_entry.get("original_url")
            if not video_url:
                # Trong extract_flat, TikTok ƒë√¥i khi tr·∫£ v·ªÅ 'id' thay v√¨ URL ƒë·∫ßy ƒë·ªß
                vid_id = latest_entry.get("id")
                if vid_id:
                    video_url = f"https://www.tiktok.com/@{args.username}/video/{vid_id}"
                else:
                    raise RuntimeError("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c URL video m·ªõi nh·∫•t.")

            ts = latest_entry.get("timestamp")
            ts_str = datetime.fromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S") if ts else "N/A"
            logging.info(f"Video m·ªõi nh·∫•t: {video_url}\nTh·ªùi gian ƒëƒÉng: {ts_str}")

            if not db.validate_yt_post(latest_entry['title'], video_url):
                logging.info("‚ö†Ô∏è ƒê√£ t·ªìn t·∫°i trong DB, b·ªè qua.")
                continue

            logging.info(f"\n[T·∫£i audio b·∫±ng yt-dlp] ... {video_url}")
            video_id = f"t_{args.username}_{video_url.rstrip('/').split('/')[-1]}"
            audio_path = download_best_audio(video_url, outdir=args.outdir, vid_id=video_id)
            logging.info(f"ƒê√£ t·∫£i audio: {audio_path}")

            if audio_path:
                # Ghi metadata v√†o DB ƒë·ªÉ Job 2 x·ª≠ l√Ω
                logging.info(f"‚úÖ Chu·∫©n b·ªã l∆∞u metadata video v√†o c∆° s·ªü d·ªØ li·ªáu title: {latest_entry['title']}, url: {video_url}, timestamp: {ts_str}")
                if db.insert_yt_post(video_id, latest_entry['title'], video_url, "", ts_str):
                    logging.info(f"‚úÖ ƒê√£ l∆∞u metadata video v√†o c∆° s·ªü d·ªØ li·ªáu title: {latest_entry['title']}, url: {video_url}, timestamp: {ts_str}")
        except Exception as e:
            logging.error(f"‚ö†Ô∏è L·ªói e: {e}")
        # logging.info(f"\n[Transcribe b·∫±ng Whisper] ... {audio_path}")
        # outputs = transcribe_with_whisper(audio_path, model_size=args.model, language=args.lang, outdir=args.transdir)
        # logging.info(f"ƒê√£ transcribe audio")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.info(f"‚ùå L·ªói: {e}", file=sys.stderr)
        sys.exit(1)
